name: Laravel CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: dom, curl, libxml, mbstring, xml, zip, ctype, fileinfo, json, pdo, tokenizer, xmlwriter, gd, mysql, pdo_mysql
        coverage: none

    - name: Install Dependencies
      run: |
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        cp .env.example .env
        php artisan key:generate

    - name: Directory Permissions
      run: |
        mkdir -p storage/framework/{sessions,views,cache}
        chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mysql -h 127.0.0.1 -u root -ppassword -e "CREATE DATABASE IF NOT EXISTS test_db;"
        mysql -h 127.0.0.1 -u root -ppassword -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'password';"
        mysql -h 127.0.0.1 -u root -ppassword -e "GRANT ALL PRIVILEGES ON test_db.* TO 'test_user'@'%';"
        mysql -h 127.0.0.1 -u root -ppassword -e "FLUSH PRIVILEGES;"

    - name: Environment Setup
      run: |
        cp .env.example .env
        sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/g' .env
        sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/g' .env
        sed -i 's/DB_PORT=.*/DB_PORT=3306/g' .env
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=test_db/g' .env
        sed -i 's/DB_USERNAME=.*/DB_USERNAME=test_user/g' .env
        sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=password/g' .env
        cat .env

    - name: Install Dependencies
      run: |
        composer install --no-interaction --prefer-dist --optimize-autoloader --no-progress
        php artisan key:generate

    - name: Generate Key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database Tables
      run: |
        php artisan migrate:fresh --seed --force

    - name: Execute Tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_DATABASE: test_db
        DB_USERNAME: test_user
        DB_PASSWORD: password
      run: |
        php artisan test

  deploy:
    needs: laravel-tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: dom, curl, libxml, mbstring, xml, zip, ctype, fileinfo, json, pdo, tokenizer, xmlwriter, gd, mysql, pdo_mysql

    - name: Install Dependencies
      run: |
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        
    - name: Build assets (if using Laravel Mix or Vite)
      run: |
        npm ci
        npm run build --if-present
        
    - name: Upload to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "*"
        target: ${{ secrets.DEPLOY_PATH }}

    - name: Execute remote commands
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.DEPLOY_PATH }}
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan storage:link
          php artisan optimize
          # 重新啟動 PHP-FPM 或您的 Web 伺服器
          # sudo systemctl restart php8.1-fpm
          # sudo systemctl restart nginx
